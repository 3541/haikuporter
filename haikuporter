#!/bin/env python
# -*- coding: utf-8 -*-
# copyright 2007-2011 Brecht Machiels
# copyright 2009-2010 Chris Roberts
# copyright 2009-2011 Scott McCreary
# copyright 2009 Alexander Deynichenko
# copyright 2009 HaikuBot (aka RISC)
# copyright 2010-2011 Jack Laxson (Jrabbit)
# copyright 2011 Ingo Weinhold
# copyright 2013 Oliver Tappe

info = {}
info['version'] = 'r' + '$Rev$'[6:-2]

# -- Modules ------------------------------------------------------------------

import hashlib
import locale
from optparse import OptionParser
import os
import re
import shutil
from subprocess import check_call, PIPE, Popen, CalledProcessError
import sys
import tarfile
import time
import types
import urllib2
import zipfile

# -- HaikuPorts options -------------------------------------------------------

# location of haikuports.conf
haikuportsConf = '/etc/haikuports.conf'

svnPath = 'http://ports.haiku-files.org/svn/haikuports/trunk'

# -----------------------------------------------------------------------------

# create new type 'StatusType' for identifying the port's status on a platform
#  the possible states are defined in the 'Config' class (reStatusType)
class status(str):
    pass

StatusType = status

# create new type 'PhaseType' for identifying a port phase
class phase(str):
    @staticmethod
    def getAllowedValues():
        return [ 'BUILD', 'TEST', 'INSTALL' ]

PhaseType = phase


# allowed types of the /etc/haikuports.conf values
haikuportsConfigTypes = {}
haikuportsConfigTypes['PACKAGES_PATH'] = types.StringType
haikuportsConfigTypes['PATCH_OPTIONS'] = types.StringType
haikuportsConfigTypes['PACKAGER'] = types.StringType

haikuportsConfigDefaults = {}  # [required, default]
haikuportsConfigDefaults['PACKAGES_PATH'] = [True, None]
haikuportsConfigDefaults['PATCH_OPTIONS'] = [False, None]
haikuportsConfigDefaults['PACKAGER'] = [True, None]

# allowed types of the recipe-file values
recipeTypes = {}
recipeTypes['BUILD_PACKAGE_ACTIVATION_PHASE'] = PhaseType
recipeTypes['BUILD_PREREQUIRES'] = types.ListType
recipeTypes['BUILD_REQUIRES'] = types.ListType
recipeTypes['CHECKSUM_MD5'] = types.StringType
recipeTypes['CONFLICTS'] = types.ListType
recipeTypes['COPYRIGHT'] = types.ListType
recipeTypes['DESCRIPTION'] = types.ListType
recipeTypes['FRESHENS'] = types.ListType
recipeTypes['HOMEPAGE'] = types.StringType
recipeTypes['LICENSE'] = types.ListType
recipeTypes['MESSAGE'] = types.StringType
recipeTypes['PROVIDES'] = types.ListType
recipeTypes['REPLACES'] = types.ListType
recipeTypes['REQUIRES'] = types.ListType
recipeTypes['REVISION'] = types.IntType
recipeTypes['SOURCE_DIR'] = types.StringType
recipeTypes['SRC_URI'] = types.ListType
recipeTypes['STATUS_HAIKU'] = StatusType
recipeTypes['SUMMARY'] = types.StringType
recipeTypes['SUPPLEMENTS'] = types.ListType

recipeDefaults = {}  # [required, default]
recipeDefaults['BUILD_PACKAGE_ACTIVATION_PHASE'] = [False, phase('BUILD')]
recipeDefaults['BUILD_PREREQUIRES'] = [False, []]
recipeDefaults['BUILD_REQUIRES'] = [False, []]
recipeDefaults['CHECKSUM_MD5'] = [False, None]
recipeDefaults['CONFLICTS'] = [False, []]
recipeDefaults['COPYRIGHT'] = [False, []]
recipeDefaults['DESCRIPTION'] = [True, None]
recipeDefaults['FRESHENS'] = [False, []]
recipeDefaults['HOMEPAGE'] = [True, None]
recipeDefaults['LICENSE'] = [False, []]
recipeDefaults['MESSAGE'] = [False, None]
recipeDefaults['PROVIDES'] = [True, None]
recipeDefaults['REPLACES'] = [False, []]
recipeDefaults['REQUIRES'] = [False, []]
recipeDefaults['REVISION'] = [True, 1]
recipeDefaults['SOURCE_DIR'] = [False, None]
recipeDefaults['SRC_URI'] = [True, []]
recipeDefaults['STATUS_HAIKU'] = [False, 'untested']
recipeDefaults['SUMMARY'] = [True, None]
recipeDefaults['SUPPLEMENTS'] = [False, []]
recipeDefaults['WORKING'] = [False, True]

# names of directories
paths = {}
paths['work'] = 'work'
paths['patches'] = 'patches'
paths['download'] = 'download'
paths['package'] = 'package'
paths['licenses'] = 'licenses'

# regex to split recipe filenames into port / version
regExp = {}
regExp['portname'] = '^(?P<name>[\w\-\+]+?)'
regExp['portversion'] = '(?P<version>[\w]*?[\d]+([\w\-\\.\+])*)'
regExp['portfullname'] = regExp['portname'] + '-' + regExp['portversion']
regExp['recipefilename'] = regExp['portfullname'] + '\.recipe$'


# Shell scriptlet that is used to execute a config file and output all the 
# configuration values (in the form of environment variables) which have been
# set explicitly in the configuration file. The first placeholder is substituted 
# with the configuration file, the second with a space separated list of 
# supported configuration keys.
# Note: this script requires bash, it won't work with any other shells
configFileEvaluatorScript = r'''# wrapper script for evaluating config/recipe
# stop on every error
set -e

# source the configuration file
. %s >/dev/null

# output all environment vars we are interested in and which have been set, 
# quoting any newlines in their values
NL=$'\n'
for key in %s 
do
    if [[ -n ${!key+dummy} ]]
    then
        value=${!key}
        echo "$key=${value//$NL/\\n}"
    fi
done
'''

# Shell scriptlet that is used to trigger one of the actions defined in a build
# recipe.The first placeholder is substituted with the configuration file, the 
# second one with the action to be invoked.
recipeActionScript = r'''# wrapper scriptlet for running an action
# stop on every error
set -e

# provide defaults for every action
BUILD()
{
    true
}

INSTALL()
{
    true
}

TEST()
{
    true
}

# source the configuration file
. %s >/dev/null

# invoke the requested action
action='%s'
if [[ $quiet ]]; then
    $action >/dev/null
else
    $action
fi
'''

# -- global configuration ----------------------------------------------------
haikuportsConfig = {}


# -- capture output of shell command -----------------------------------------
def check_output(*popenargs, **kwargs):
    """local clone of subprocess.check_output() provided by python-2.7
       TODO: drop this once we have upgraded python to 2.7"""
    process = Popen(stdout=PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise CalledProcessError(retcode, cmd)
    return output


# -- Set up locale for thousands seperators ----------------------------------
def _ourLocaleconv(lc=locale.localeconv()):
    lc.update({'thousands_sep': ',', 'grouping': [3, 3, 0]})
    return lc


def findDirectory(aDir, subDirPath = None):
    result = check_output(['/bin/finddir', aDir]).rstrip()  # drop newline
    if subDirPath != None:
        result += '/' + subDirPath
    return result


locale.localeconv = _ourLocaleconv

# -- A single port with its recipe, allows to execute actions ----------------
class Port:
    def __init__(self, name, version, category, baseDir, globalShellVariables):
        self.name = name
        self.version = version
        self.category = category            
        self.baseDir = baseDir
        self.shellVariables = globalShellVariables
        self.forceOverride = False
        self.beQuiet = False

        # create full paths for the directories
        self.downloadDir = self.baseDir + '/' + paths['download']
        self.workDir = self.baseDir + '/' + paths['work']
        self.sourceDir = self.workDir
        self.patchesDir = self.baseDir + '/' + paths['patches']
        self.packageDir = self.baseDir + '/' + paths['package']
        
    def __enter__(self):
        self.activeBuildPackage = None
        return self
    
    def __exit__(self, type, value, traceback):
        self.deactivateBuildPackage()

    def parseRecipeFile(self):
        """Parse the recipe-file of the specified port"""
        recipeFilePath = (self.baseDir + '/' + self.name + '-' +
                          self.version + '.recipe')
        if not os.path.exists(recipeFilePath):
            sys.exit('Error: ' + self.name + ' version '
                      + self.version + ' not found.')

        self.validateRecipeFile(recipeFilePath)

        # set default values when not provided
        for key in recipeDefaults:
            if key not in self.recipeKeys:
                self.recipeKeys[key] = recipeDefaults[key][1]
                
        # If a SOURCE_DIR was specified, make it absolute.
        if self.recipeKeys['SOURCE_DIR']:
            self.sourceDir = self.workDir + '/' + self.recipeKeys['SOURCE_DIR']

        # set up the complete list of variables we'll inherit to the shell
        # when executing a recipe action
        self.initShellVariablesFromRecipe()

        # for key in self.recipeKeys:
        #     print key + " = " + str(self.recipeKeys[key])

    def validateRecipeFile(self, recipeFilePath):
        # initialize basic port-specific shell variables            
        self.versionedName = self.name + '-' + self.version
        self.shellVariables.update({
            'portName': self.name,
            'portVersion': self.version,
            'portVersionedName': self.versionedName,
        })
        
        """Validate the keys/values in a recipe file"""
        recipeConfig = Config(recipeFilePath, recipeTypes, self.shellVariables)
        self.recipeFilePath = recipeFilePath
        self.recipeKeys = recipeConfig.getEntries()

        # check whether all required fields are present
        for key in recipeDefaults:
            if key not in self.recipeKeys and recipeDefaults[key][0]:
                sys.exit("Error: Required field '" + key\
                         + "' not present in " + recipeFilePath)

        # Check for a valid license file
        if 'LICENSE' in self.recipeKeys:
            fileList = []
            recipeLicense = self.recipeKeys['LICENSE']
            for item in recipeLicense:
                dirname = findDirectory('B_SYSTEM_DIRECTORY', 'data/licenses')
                haikuLicenseList = fileList = os.listdir(dirname)
                if item not in fileList:
                    fileList = []
                    dirname = os.path.dirname(recipeFilePath) + '/licenses'
                    if os.path.exists(dirname):
                        for filename in os.listdir(dirname):
                            fileList.append(filename)
                if item not in fileList:
                    haikuLicenseList.sort()
                    sys.exit(('\n######## Error: No match found for License %s '
                              '########\n' % item) + '\n'
                              + 'Valid license filenames included with Haiku '
                              + 'are:\n\n' + '\n'.join(haikuLicenseList) + '\n')

        if 'LICENSE' not in self.recipeKeys or not self.recipeKeys['LICENSE']:
            print 'Warning: No LICENSE found in recipe file'

        if 'COPYRIGHT' not in self.recipeKeys or not self.recipeKeys['COPYRIGHT']:
            print 'Warning: No COPYRIGHT found in recipe file'

    def initShellVariablesFromRecipe(self):
        self.revision = str(self.recipeKeys['REVISION'])
        self.fullVersion = self.version + '-' + self.revision
        self.revisionedName = self.name + '-' + self.fullVersion
        prefix = findDirectory('B_PACKAGE_LINKS_DIRECTORY',
            self.revisionedName + '/.self')

        self.shellVariables.update({
            'portRevision': self.revision,
            'portFullVersion': self.fullVersion,
            'portRevisionedName': self.revisionedName,
            'prefix': prefix,
            'dataRootDir': prefix + '/data',
            'binDir': prefix + '/bin',
            'sbinDir': prefix + '/bin',
            'libDir': prefix + '/lib',
            'includeDir': prefix + '/develop/headers',
            'sysconfDir': prefix + '/settings',
            'docDir': prefix + '/documentation/packages/' + self.name,
            'infoDir': prefix + '/documentation/info',
            'manDir': prefix + '/documentation/man',
            'sourceDir': self.sourceDir,
        })
        self.shellVariables['configureDirArgs'] = \
            '--prefix=$prefix '                   \
            '--datarootdir=$dataRootDir '         \
            '--sbindir=$sbinDir '                 \
            '--includedir=$includeDir '           \
            '--sysconfdir=$sysconfDir '           \
            '--docdir=$docDir '                   \
            '--infodir=$infoDir '                 \
            '--mandir=$manDir'

    def printDescription(self):
        """Show port description"""
        print '*' * 80
        if 'SUMMARY' in self.recipeKeys:
            print 'SUMMARY: %s' % self.recipeKeys['SUMMARY']
        if 'SUMMARY' in self.recipeKeys:
            print 'DESCRIPTION: %s' % self.recipeKeys['DESCRIPTION']
        if 'HOMEPAGE' in self.recipeKeys:
            print 'HOMEPAGE: %s' % self.recipeKeys['HOMEPAGE']
        print '*' * 80

    def setFlag(self, name):
        open('%s/%s-%s.%s' % (self.workDir, self.name,
             self.version, name), 'w').close()

    def checkFlag(self, name):
        if os.path.exists('%s/%s-%s.%s' % (self.workDir, self.name,
                                           self.version, name)):
            return True
        else:
            return False

    def cleanWorkDirectory(self):
        """Clean the working directory"""
        if os.path.exists(self.workDir):
            print 'Cleaning work directory...'
            shutil.rmtree(self.workDir)
                
    def downloadSource(self):
        """Fetch the source archive"""
        for src_uri in self.recipeKeys['SRC_URI']:
            # Examine the URI to determine if we need to perform a checkout
            # instead of download
            if re.match('^cvs.*$|^svn.*$|^hg.*$|^git.*$|^bzr.*$|^fossil.*$',
                        src_uri):
                self.checkoutSource(src_uri)
                return

            try:
                # Need to make a request to get the actual uri in case it is an
                # http redirect
                uri_request = urllib2.urlopen(src_uri)
                src_uri = uri_request.geturl()

                self.src_local = src_uri[src_uri.rindex('/') + 1:]
                fp = self.downloadDir + '/' + self.src_local
                if os.path.isfile(fp):
                    print 'File already exists: ' + fp \
                         + '\nSkipping download ...'
                    return
                else:
                    # create download dir and cd into it
                    if not os.path.exists(self.downloadDir):
                        os.mkdir(self.downloadDir)

                    os.chdir(self.downloadDir)

                    print '\nDownloading: ' + src_uri
                    check_call(['wget', '-c', '--tries=3', src_uri])

                    # succesfully downloaded source archive
                    return
            except:
                print 'Warning: download error, trying next location.'

        # failed to fetch source
        sys.exit('Error: Failed to download source package from all locations.')

    def checkoutSource(self, uri):
        """Parse the URI and execute the appropriate command to check out the
         source.
                 
        """
        if self.checkFlag('checkout') and not self.forceOverride:
            print 'Source already checked out. Skipping ...'
            return

        # If the work dir exists we need to clean it out
        if os.path.exists(self.workDir):
            shutil.rmtree(self.workDir)

        print 'Source checkout: ' + uri

        # Attempt to parse a URI with a + in it. ex: hg+http://blah
        # If it doesn't find the 'type' it should extract 'real_uri' and 'rev'
        m = re.match('^((?P<type>\w*)\+)?(?P<real_uri>.+?)(#(?P<rev>.+))?$',
                     uri)
        if not m or not m.group('real_uri'):
            sys.exit("Error: Couldn't parse repository URI")

        type = m.group('type')
        real_uri = m.group('real_uri')
        rev = m.group('rev')

        # Attempt to parse a URI without a + in it. ex: svn://blah
        # TODO improve the regex above to fallback to this pattern
        if not type:
            m = re.match("^(\w*).*$", real_uri)
            if m:
                type = m.group(1)

        if not type:
            sys.exit("Error: Couldn't determine repository type")

        # Set the name of the directory to check out sources into
        checkoutDir = self.name + '-' + self.version

        # Start building the command to perform the checkout
        if type == 'cvs':
            # Chop off the leading cvs:// part of the uri
            real_uri = real_uri[real_uri.index('cvs://') + 6:]

            # Extract the cvs module from the uri and remove it from real_uri
            module = real_uri[real_uri.rfind('/') + 1:]
            real_uri = real_uri[:real_uri.rfind('/')]
            checkoutCommand = 'cvs -d' + real_uri + ' co -P'
            if rev:
                # For CVS 'rev' specifies a date
                checkoutCommand += ' -D' + rev
            checkoutCommand += ' -d ' + checkoutDir + ' ' + module
        elif type == 'svn':
            checkoutCommand = \
                'svn co --non-interactive --trust-server-cert'
            if rev:
                checkoutCommand += ' -r ' + rev
            checkoutCommand += ' ' + real_uri + ' ' + checkoutDir
        elif type == 'hg':
            checkoutCommand = 'hg clone'
            if rev:
                checkoutCommand += ' -r ' + rev
            checkoutCommand += ' ' + real_uri + ' ' + checkoutDir
        elif type == 'bzr':
            # http://doc.bazaar.canonical.com/bzr-0.10/bzr_man.htm#bzr-branch-from-location-to-location
            checkoutCommand = 'bzr checkout --lightweight'
            if rev:
                checkoutCommand += ' -r ' + rev
            checkoutCommand += ' ' + real_uri + ' ' + checkoutDir
        elif type == 'fossil':
            # http://fossil-scm.org/index.html/doc/trunk/www/quickstart.wiki
            if os.path.exists(checkoutDir + '.fossil'):
                shutil.rmtree(checkoutDir + '.fossil')
            checkoutCommand = 'fossil clone ' + real_uri
            checkoutCommand += ' ' + checkoutDir + '.fossil'
            checkoutCommand += ' && '
            checkoutCommand += 'mkdir -p ' + checkoutDir
            checkoutCommand += ' && '
            checkoutCommand += 'fossil open ' + checkoutDir + '.fossil'
            if rev:
                checkoutCommand += ' ' + rev
        else:
            # TODO Skip the initial checkout if a rev is specified?
            checkoutCommand = 'git clone %s %s' % (real_uri, checkoutDir)
            if rev:
                checkoutCommand += (' && cd %s'
                                    ' && git checkout %s' % (checkoutDir, rev))

        # create the work dir
        if not os.path.exists(self.workDir):
            os.mkdir(self.workDir)

        check_call(checkoutCommand, shell=True, cwd=self.workDir)

        # Set the 'checkout' flag to signal that the checkout is complete
        # This also tells haikuporter not to attempt an unpack step
        self.setFlag('checkout')

    def checksumSource(self):
        if self.recipeKeys['CHECKSUM_MD5']:
            sys.stdout.write('Calculating checksum -')
            sys.stdout.flush()
            h = hashlib.md5()
            f = open(self.downloadDir + '/' + self.src_local, 'rb')
            while True:
                d = f.read(16384)
                if not d:
                    break
                h.update(d)
            f.close()
            if h.hexdigest() == self.recipeKeys['CHECKSUM_MD5']:
                sys.stdout.write(' OK\n')
            else:
                sys.exit(' FAILED\nExpected: ' + self.recipeKeys['CHECKSUM_MD5'] 
                         +  '\nFound: ' + h.hexdigest() + '\n')
            sys.stdout.flush()
        else:
            # The checkout flag only gets set when a source checkout is performed
            # If it exists we don't need to warn about the missing recipe field
            if not self.checkFlag('checkout'):
                print 'Warning: CHECKSUM_MD5 key not found in recipe file.'

    def unpackSource(self):
        """Unpack the source archive (into the work directory)"""

        # If the source came from a vcs there is no unpack step
        if self.checkFlag('checkout'):
            return

        # create work dir
        if not os.path.exists(self.workDir):
            os.mkdir(self.workDir)

        # Check to see if the source archive was already unpacked.
        if self.checkFlag('unpack') and not self.forceOverride:
            return

        # unpack source archive
        print 'Unpacking ' + self.src_local
        archiveFullPath = self.downloadDir + '/' + self.src_local
        if tarfile.is_tarfile(archiveFullPath):
            tf = tarfile.open(self.downloadDir + '/' + self.src_local, 'r')
            tf.extractall(self.workDir)
            tf.close()
        elif zipfile.is_zipfile(archiveFullPath):
            zf = zipfile.ZipFile(self.downloadDir + '/' + self.src_local, 'r')
            zf.extractall(self.workDir)
            zf.close()
        elif archiveFullPath.split('/')[-1].split('.')[-1] == 'xz':
            Popen(['xz', '-d', '-k', archiveFullPath]).wait()
            tar = archiveFullPath[:-3]
            if tarfile.is_tarfile(tar):
                tf = tarfile.open(tar, 'r')
                tf.extractall(self.workDir)
                tf.close()
        else:
            sys.exit('Error: Unrecognized archive type.')

        self.setFlag('unpack')

    def patchSource(self):
        """Apply the Haiku patches to the source directory"""
        # Check to see if the patch was already applied to the source.
        if self.checkFlag('patch') and not self.forceOverride:
            return

        patchFilePath = self.patchesDir + '/' + self.name + '-'\
             + self.version + '.patch'
        if os.path.exists(patchFilePath):
            print 'Patching ...'
            patchOptions = ''
            if 'PATCH_OPTIONS' in haikuportsConfig:
                patchOptions += haikuportsConfig['PATCH_OPTIONS']
            check_call('patch -p0 ' + patchOptions + ' -i '
                        + patchFilePath, shell=True, cwd=self.workDir)
        else:
            print 'No patching required'
        self.setFlag('patch')

    def build(self):
        """Build the sources"""
        # Check to see if a previous build was already done.
        if self.checkFlag('build') and not self.forceOverride:
            return

        # activate build package if required at this stage
        if self.recipeKeys['BUILD_PACKAGE_ACTIVATION_PHASE'] == 'BUILD':
            self.activateBuildPackage()
            
        # Delete and re-create the package dir -- the port's build may need to
        # use it.
        if os.path.exists(self.packageDir):
            print 'deleting package folder'
            shutil.rmtree(self.packageDir, True)
        os.mkdir(self.packageDir)

        print 'Building ...'
        self.doRecipeAction('BUILD', self.sourceDir)
        self.setFlag('build')

    def install(self):
        """Install the files resulting from the build into the package folder"""
        # activate build package if required at this stage
        if self.recipeKeys['BUILD_PACKAGE_ACTIVATION_PHASE'] == 'INSTALL':
            self.activateBuildPackage()
            
        print 'Collecting files to be packaged ...'
        self.doRecipeAction('INSTALL', self.sourceDir)

    def test(self):
        """Test the build results"""
        # activate build package if required at this stage
        if self.recipeKeys['BUILD_PACKAGE_ACTIVATION_PHASE'] == 'TEST':
            self.activateBuildPackage()
            
        print 'Testing ...'
        self.doRecipeAction('TEST', self.sourceDir)

    def doRecipeAction(self, action, dir):
        """Run the specified action, as defined in the recipe file"""

        # set up the shell environment -- we want it to inherit some of our
        # variables
        shellEnv = os.environ
        shellEnv.update(self.shellVariables)

        # execute the requested action via a shell ....
        wrapperScript = recipeActionScript % (self.recipeFilePath, action)
        check_call(['/bin/bash', '-c', wrapperScript], cwd=dir, env=shellEnv)

    def activateBuildPackage(self):
        """Create and activate the build package"""
        # create a package info for a build package
        buildPackageInfo = self.workDir + '/' + self.revisionedName + \
            '-build-package-info'
        self.generatePackageInfo(buildPackageInfo, True)

        # create the build package
        buildPackage = self.workDir + '/' + self.revisionedName + \
            '-build.hpkg'
        cmdlineArgs = ['package', 'create', '-bi', buildPackageInfo, '-I',
            self.packageDir, buildPackage]
        if self.beQuiet:
            cmdlineArgs.insert(2, '-q')
        check_call(cmdlineArgs)

        # activate the build package
        packagesDir = findDirectory('B_COMMON_PACKAGES_DIRECTORY')
        activeBuildPackage \
            = packagesDir + '/' + os.path.basename(buildPackage)
        try:
            os.remove(activeBuildPackage)
        except OSError:
            pass
        os.symlink(buildPackage, activeBuildPackage)
        self.activeBuildPackage = activeBuildPackage

    def deactivateBuildPackage(self):
        """Deactivate the build package, if it has been activated"""
        if self.activeBuildPackage:
            try:
                os.remove(self.activeBuildPackage)
            except OSError:
                pass
            self.activeBuildPackage = None

    def generatePackageInfo(self, packageInfoPath, isBuildPackage):
        """Create an .PackageInfo file for inclusion in a package"""
        print 'Generating .PackageInfo file ...'

        infoFile = open(packageInfoPath, 'w')
        infoFile.write('name\t\t\t' + self.name + '\n')
        infoFile.write('version\t\t\t' + self.fullVersion + '\n')
        infoFile.write('architecture\t\t' + self.shellVariables['architecture'] + '\n')
        infoFile.write('summary\t\t\t"' + self.recipeKeys['SUMMARY'] + '"\n')

        infoFile.write('description\t\t"')
        lineNumber = 0
        for line in self.recipeKeys['DESCRIPTION']:
            if lineNumber > 0:
                infoFile.write('\n')
            infoFile.write(line)
            lineNumber += 1
        infoFile.write('"\n')

        infoFile.write('packager\t\t"' + haikuportsConfig['PACKAGER'] + '"\n')
        infoFile.write('vendor\t\t\t"Haiku Project"\n')

        # These keys aren't mandatory so we need to check if they exist
        if self.recipeKeys['LICENSE']:
            infoFile.write('licenses {\n')
            for license in self.recipeKeys['LICENSE']:
                infoFile.write('\t"' + license + '"\n')
            infoFile.write('}\n')

        if self.recipeKeys['COPYRIGHT']:
            infoFile.write('copyrights {\n')
            for copyright in self.recipeKeys['COPYRIGHT']:
                infoFile.write('\t"' + copyright + '"\n')
            infoFile.write('}\n')

        if isBuildPackage:
            dependencies = self.recipeKeys['REQUIRES'] \
                + self.recipeKeys['BUILD_REQUIRES'] \
                + self.recipeKeys['BUILD_PREREQUIRES']
        else:
            dependencies = self.recipeKeys['REQUIRES']

        self.writePackageInfoListByKey(infoFile, 'PROVIDES', 'provides')
        self.writePackageInfoList(infoFile, dependencies, 'requires')
        self.writePackageInfoListByKey(infoFile, 'SUPPLEMENTS', 'supplements')
        self.writePackageInfoListByKey(infoFile, 'CONFLICTS', 'conflicts')
        self.writePackageInfoListByKey(infoFile, 'FRESHENS', 'freshens')
        self.writePackageInfoListByKey(infoFile, 'REPLACES', 'replaces')

        infoFile.write('urls\t\t\t"' + self.recipeKeys['HOMEPAGE'] + '"\n')

        # Generate SourceURL lines for all ports, regardless of license.
        # Re-use the download URLs, as specified in the recipe.
        infoFile.write('source-urls {\n')
        uricount = 1
        for src_uri in self.recipeKeys['SRC_URI']:
            if uricount < 2:
                infoFile.write('\t"Download <' + src_uri + '>"\n')
            else:
                infoFile.write('\t"Location ' + str(uricount) + ' <' + src_uri
                    + '>"\n')
            uricount += 1

        # Point directly to the file in subversion.
        recipeurl_base = 'http://ports.haiku-files.org/' + \
            'svn/haikuports/trunk/' + self.category + '/' + self.name

        recipeurl = recipeurl_base + '/' + self.name+ '-'\
            + self.version + '.recipe'

        infoFile.write('\t"Port-file <' + recipeurl + '>"\n')
        patchFilePath = self.patchesDir + '/' + self.name + '-'\
            + self.version + '.patch'
        if os.path.exists(patchFilePath):
            patchurl = recipeurl_base + '/patches/' + self.name + '-' + self.version + '.patch'
            infoFile.write('\t"Patches <' + patchurl + '>"\n')

        infoFile.write('}\n')
        infoFile.close()
        
        if not isBuildPackage and not self.beQuiet:
            infoFile = open(packageInfoPath, 'r')
            infoFileDisplay = infoFile.read()
            print infoFileDisplay
            infoFile.close()

    def writePackageInfoListByKey(self, infoFile, key, keyword):
        self.writePackageInfoList(infoFile, self.recipeKeys[key], keyword)

    def writePackageInfoList(self, infoFile, list, keyword):
        if list:
            infoFile.write(keyword + ' {\n')
            for item in list:
                infoFile.write('\t' + item + '\n')
            infoFile.write('}\n')

    def makePackage(self):
        """Create a package suitable for distribution"""
        print 'Creating distribution package ...'

        # if the package dir still exists from a previous run then remove it
        shutil.rmtree(self.packageDir, True)

        # create package dir
        if not os.path.exists(self.packageDir):
            os.mkdir(self.packageDir)

        for f in os.listdir(self.baseDir):
            if f == 'licenses':
                shutil.copytree(self.baseDir + '/' + f,
                    self.packageDir + '/data/licenses')

        self.install()

        self.generatePackageInfo(self.packageDir + '/.PackageInfo', False)

        # go to package dir for making the package
        os.chdir(self.packageDir)

        package = self.name + '-' + self.version

        packageFile = self.baseDir + '/' + self.revisionedName + '-'\
             + self.shellVariables['architecture'] + '.hpkg'

        # Test if package already exists, and if so delete so that it will be
        # the newest.
        if os.path.exists(packageFile):
            os.remove(packageFile)
        
        # Create the package and save it in the root of the port dir
        check_call(['package', 'create', packageFile])

        # Clean up after ourselves
        shutil.rmtree(self.packageDir)

        print 'Package saved to: ' + packageFile
        
        # give hint about source package for ports using (L)GPL license
        if 'GNU GPL' in self.recipeKeys['LICENSE'] \
            or 'GNU LGPL' in self.recipeKeys['LICENSE']:
            print ('To generate the matching source package, run: '
                   'haikuporter -z ' + package)

    def makePatchedArchive(self):
        """Create a patched source archive"""
        print 'Creating patched source archive ...'

        # Set the path and filename for the archive.
        date = time.strftime('-%Y-%m-%d', time.localtime())
        archiveFile = self.baseDir + '/' + self.name + '-'\
             + self.version + '_haiku' + date + '.tar.xz'

        sourceFiles = ''

        # Build the list of dirs to archive.
        # Since we don't know the name we have to iterate over the dir.
        for f in os.listdir(self.workDir):
            if os.path.isdir(self.workDir + '/' + f):
                sourceFiles += ' ' + f

        # Make sure we found something to archive
        if not sourceFiles:
            sys.exit('Error: No source directories found in work dir.')

        # Archive the package and save it in the root of the port dir.
        check_call('tar cJvf ' + archiveFile + ' ' + sourceFiles,
                   shell=True, cwd=self.workDir)

        # Clean up after ourselves
        shutil.rmtree(self.workDir)

        print 'Archive saved to: ' + archiveFile


# -- Main Class --------------------------------------------------------------
class HaikuPorter:
    def __init__(self, options, args):
        self.options = options
        
        # read global settings
        global haikuportsConfig
        haikuportsConfig = Config(haikuportsConf, 
                                  haikuportsConfigTypes).getEntries()

        # check whether all required fields are present
        for key in haikuportsConfigDefaults:
            if key not in haikuportsConfig and haikuportsConfigDefaults[key][0]:
                sys.exit("Error: Required field '" + key + "' not present in " 
                         + haikuportsConf)

        # set up the global variables we'll inherit to the shell
        self.initGlobalShellVariables()
    
        self.packagesPath = haikuportsConfig['PACKAGES_PATH']
        if self.packagesPath[-1] == '/':
            # strip trailing '/'
            self.packagesPath = self.packagesPath[:-1]

        # if requested, list all ports in the HaikuPorts tree
        if self.options.list:
            self.searchPorts(None)
            sys.exit()

        # if requested, search for a port
        if self.options.search:
            if not args:
                sys.exit('You need to specify a search string.\n'
                         "Invoke '" + sys.argv[0] + " -h' for usage "
                         "information.")
            self.searchPorts(args[0])
            sys.exit()
        
        if self.options.location:
            if not args:
                sys.exit('You need to specify a search string.\n'
                         "Invoke '" + sys.argv[0] + " -h' for usage "
                         "information.")
            # Provide the installed location of a port (for quick editing)
            print os.path.join(self.packagesPath, self.searchPorts(args[0]))
            sys.exit()

        # if requested, checkout or update ports tree
        if self.options.get:
            self.updatePortsTree()
            sys.exit()

        # if requested, print the location of the haikuports source tree
        if self.options.tree:
            print self.packagesPath
            sys.exit()

        # if requested, scan the ports tree for problems
        if self.options.lint:
            self.checkSourceTree()
            sys.exit()

        # if there is no argument given, exit
        if not args:
            sys.exit('You need to specify a search string.\n'
                     "Invoke '" + sys.argv[0] + " -h' for usage information.")
        else:
            port = args[0]

        # split the argument into a port name and a version
        name, version = self.splitPortSpecIntoNameAndVersion(port)

        # find the port in the HaikuPorts tree
        category = self.getCategory(name)
        if category == None:
            sys.exit('Error: Port ' + name + ' not found in tree.')

        baseDir = self.packagesPath + '/' + category + '/' + name
        with Port(name, version, category, baseDir, 
                  self.shellVariables) as port:
            # if the port version was not specified, list available versions
            if port.version == None:
                versions = []
                reRecipeFile = re.compile(regExp['recipefilename'])
                dirList = os.listdir(baseDir)
                for item in dirList:
                    m = reRecipeFile.match(item)
                    if m:
                        versions.append([m.group('version'), item])
                if len(versions) > 1:
                    print 'Following versions of %s are available:' % name
                    for version in versions:
                        print '  ' + version[0]
                    sys.exit('Run haikuporter again, specifying a port version')
                elif len(versions) == 1:
                    # there is just one version, silently pick that
                    port.version = versions[0][0]
                else:
                    sys.exit('Error: no recipe files for %s found.' % name)
    
            # pass on options if needed
            if self.options.force:
                port.forceOverride = True
            if self.options.quiet:
                port.beQuiet = True

            # read data from the port file
            port.parseRecipeFile()
    
            # show port description, if requested
            if self.options.about:
                port.printDescription()
                sys.exit()
    
            # warn when the port is not stable on this platform
            self.platform = self.detectOS()
            if self.platform == None:
                sys.exit('Error: Unknown OS platform!')
            elif port.recipeKeys['STATUS_' + self.platform] != 'stable':
                print ('Warning: This port is %s on this platform.' %
                       port.recipeKeys['STATUS_' + self.platform])
                if not self.options.yes:
                    answer = raw_input('Continue (y/n + enter)? ')
                    if answer == '':
                        sys.exit(1)
                    if answer[0].lower() == 'y':
                        print ' ok'
                    else:
                        sys.exit(1)
    
            if port.recipeKeys['MESSAGE']:
                print port.recipeKeys['MESSAGE']
                if not self.options.yes:
                    answer = raw_input('Continue (y/n + enter)? ')
                    if answer == '':
                        sys.exit(1)
                    if answer[0].lower() == 'y':
                        print ' ok'
                    else:
                        sys.exit(1)
    
            # clean the work dir and don't build when making a source archive
            if self.options.archive:
                self.options.build = False
                self.options.clean = True
                self.options.patch = True
    
            # clean the work directory, if requested
            if self.options.clean:
                port.cleanWorkDirectory()
    
            # don't build when not patching
            if not self.options.patch:
                self.options.build = False
    
            port.downloadSource()
            port.checksumSource()
            port.unpackSource()
            if self.options.patch:
                port.patchSource()
            if self.options.build:
                port.build()
            if self.options.package:
                port.makePackage()
            if self.options.archive:
                port.makePatchedArchive()
            if self.options.test:
                port.test()

    def initGlobalShellVariables(self):
        # extract the package info from the system package
        output = check_output('package list /system/packages/haiku.hpkg'
            + ' | grep -E "^[[:space:]]*[[:alpha:]]+:[[:space:]]+"', shell=True)

        # get the haiku version
        match = re.search(r"provides:\s*haiku\s+=\s*(\S+)", output);
        if not match:
            sys.exit('Failed to get Haiku version!')
        self.haikuVersion = match.group(1)

        # get the architecture
        match = re.search(r"architecture:\s*(\S+)", output);
        if not match:
            sys.exit('Failed to get Haiku architecture!')
        self.architecture = match.group(1)

        self.shellVariables = {
            'haikuVersion': self.haikuVersion,
            'architecture': self.architecture,
            'jobs': str(self.options.jobs),
        }
        if self.options.quiet:
            self.shellVariables['quiet'] = '1'

    def updatePortsTree(self):
        """Get/Update the port tree via svn"""
        print 'Refreshing the port tree: %s' % self.packagesPath
        if os.path.exists(self.packagesPath + '/.svn'):
            check_call(['svn', 'update', self.packagesPath])
        else:
            check_call(['svn', 'checkout', svnPath, self.packagesPath])

    def detectOS(self):
        """Detect the platform we're running on"""
        return 'HAIKU'

    def searchPorts(self, regExp):
        """Search for a port in the HaikuPorts tree"""
        if regExp:
            reSearch = re.compile(regExp)
        os.chdir(self.packagesPath)
        dirList = os.listdir(self.packagesPath)
        for category in dirList:
            if os.path.isdir(category) and category[0] != '.':
                subdirList = os.listdir(category)
                # remove items starting with '.'
                subdirList.sort()
                for portName in subdirList:
                    if (portName[0][0] != '.' and (not regExp or
                                                   reSearch.search(portName))):
                        print category + '/' + portName

    def splitPortSpecIntoNameAndVersion(self, portSpec):
        reWithVersion = re.compile(regExp['portfullname'])
        reWithoutVersion = re.compile(regExp['portname'] + '$')
        if reWithVersion.match(portSpec):  # with version
            m = reWithVersion.match(portSpec)
            return m.group('name'), m.group('version')
        elif reWithoutVersion.match(portSpec):
            m = reWithoutVersion.match(portSpec)
            return m.group('name'), None
        else:
            # invalid argument
            sys.exit('Error: Invalid port name ' + portSpec)

    def getCategory(self, portName):
        """Find location of the specified port in the HaikuPorts tree"""
        hierarchy = []
        os.chdir(self.packagesPath)
        dirList = os.listdir(self.packagesPath)
        for item in dirList:
            if os.path.isdir(item) and item[0] != '.':
                subdirList = os.listdir(item)
                # remove items starting with '.'
                subdirList.sort()
                while subdirList[0][0] == '.':
                    del subdirList[0]

                # locate port
                try:
                    if subdirList.index(portName) >= 0:
                        # port was found in the category specified by 'item'
                        return item
                except ValueError:
                    pass
                hierarchy.append([item, subdirList])
        return None

    def checkSourceTree(self):
        print 'Checking HaikuPorts tree at: ' + self.packagesPath

        for category in os.listdir(self.packagesPath):
            categoryFullPath = self.packagesPath + '/' + category
            if os.path.isdir(categoryFullPath) and category[0] != '.':
                print 'Category: ' + category
                for port in os.listdir(categoryFullPath):
                    portFullPath = categoryFullPath + '/' + port
                    if os.path.isdir(portFullPath) and port[0] != '.':
                        print '\tPort: ' + port
                        for recipe in os.listdir(portFullPath):
                            recipeFullPath = portFullPath + '/' + recipe
                            if os.path.isfile(recipeFullPath) and \
                                recipe.endswith('.recipe'):
                                reWithVersion = re.compile(regExp['recipefilename'])
                                # reWithVersion = re.compile('^(?P<name>[a-z0-9\-_]*)-(?P<version>([\d]+[a-z\\.])*[\d]*)?$')

                                m = reWithVersion.match(recipe)
                                if (m and m.group('name') and
                                    m.group('version')):  # with version
                                    name = m.group('name')
                                    version = m.group('version')
                                    print '\t\tName/Version: %s\t%s' % (name, 
                                                                        version)
                                    try:
                                        with Port(name, version, category, 
                                                  portFullPath, 
                                                  self.shellVariables) as port:
                                            port.validateRecipeFile(
                                                recipeFullPath)
                                    except SystemExit as e:
                                        print e.code
                                else:
                                    # invalid argument
                                    print("Error: Couldn't parse port/version "
                                          "info: " + recipe)


# -- /etc/haikuports.conf and *.recipe parser --------------------------------

class Config:
    def __init__(self, filename, keysAndTypes, shellVariables={}):
        self.entries = {}

        # set up the shell environment -- we want it to inherit some of our
        # variables
        shellEnv = os.environ
        shellEnv.update(shellVariables)

        # execute the config file via the shell ....
        supportedKeysString = ' '.join(keysAndTypes.keys())
        wrapperScript = configFileEvaluatorScript % (filename, 
                                                     supportedKeysString)
        try:
            output = check_output(['/bin/bash', '-c', wrapperScript], 
                                      env=shellEnv)
        except (OSError, CalledProcessError):
            sys.exit("Error: Can't evaluate config file: " + filename)

        # ... and collect the resulting configurations (one per line)
        lines = output.splitlines()
        for line in lines:
            key, separator, valueString = line.partition('=')
            if not separator:
                sys.exit('Error: evaluating file %s produced illegal '
                         'key-values line:\n  %s\nexpected "<key>=<value>"\n'
                         'output of configuration script was:\n' 
                         % (filename, line, output))
                
            if key not in keysAndTypes:
                # skip unsupported key, just in case
                print 'Warning: key %s in file %s is unsupported, ignoring it' \
                    % (key, filename)
                continue
            
            valueString = valueString.replace(r'\n', '\n')
                # replace quoted newlines by real newlines
                
            type = keysAndTypes[key]
            if type == types.StringType:
                self.entries[key] = valueString
            elif type == types.IntType:
                try:
                    self.entries[key] = int(valueString)
                except ValueError:
                    sys.exit('Error: evaluating file %s produced illegal value '
                             '"%s" for key %s, expected an <integer> value'
                             % (filename, key, valueString))
            elif type == types.ListType:
                values = [v.strip() for v in valueString.splitlines()]
                self.entries[key] = values
            elif type == PhaseType:
                if valueString.upper() not in PhaseType.getAllowedValues():
                    sys.exit('Error: evaluating file %s\nproduced illegal value '
                             '"%s" for key %s\nexpected one of: %s'
                             % (filename, key, valueString, 
                                ','.join(PhaseType.getAllowedValues())))
                self.entries[key] = valueString.upper()
            elif type == StatusType:
                # treat as string for now
                self.entries[key] = valueString.lower()
            else:
                sys.exit('Error: type of key %s in file %s is unsupported'
                         % (key, filename))
        # for key in self.entries:
        #    print key + " = " + str(self.entries[key])

    def getEntries(self):
        return self.entries

    def valueOf(self, key):
        try:
            value = self.entries[key]
            return value
        except KeyError:
            # an unspecified entry is the same as an empty one
            return ''


# -- Command line argument parsing -------------------------------------------

parser =  OptionParser(usage='usage: %prog [options] portname[-portversion]',
                       version='%prog ' + info['version'])

parser.add_option('-l', '--list', action='store_true', dest='list',
                  default=False, help='list available ports')
parser.add_option('-a', '--about', action='store_true', dest='about',
                  default=False, help='show description of the specified port')
parser.add_option('-s', '--search', action='store_true', dest='search',
                  default=False, help='search for a port (regex)')
parser.add_option('-n', '--nopatch', action='store_false', dest='patch',
                  default=True, help="don't patch the sources, just download "
                                     "and unpack")
parser.add_option('-b', '--nobuild', action='store_false', dest='build',
                  default=True, help="don't build the port, just download, "
                                     "unpack and patch")
parser.add_option('-p', '--package', action='store_true', dest='package',
                  default=False, help="make distribution package of the "
                                      "specified port (include download, "
                                      "unpack, patch, build)")
parser.add_option('-c', '--clean', action='store_true', dest='clean',
                  default=False, help="clean the working directory of the "
                                      "specified port")
parser.add_option('-g', '--get', action='store_true', dest='get',
                  default=False, help="get/update the ports tree")
parser.add_option('-f', '--force', action='store_true', dest='force',
                  default=False, help="force to perform the steps (unpack, "
                                      "patch, build)")
parser.add_option('-q', '--quiet', action='store_true', dest='quiet',
                  default=False, help="suppress output from build actions")
parser.add_option('-z', '--archive', action='store_true', dest='archive',
                  default=False, help="Create a patched source archive as "
                                      "<package>_haiku.tar.xz")
parser.add_option('-t', '--tree', action='store_true', dest='tree',
                  default=False, help="print out the location of the "
                                      "haikuports source tree")
parser.add_option('-y', '--yes', action='store_true', dest='yes',
                  default=False, help="answer yes to all questions")
parser.add_option('-j', action='store', type="int", dest='jobs',
                  default=1, help="the number of concurrent jobs to build with")
parser.add_option('-o','--location', action='store_true', dest='location',
                default=False, help="print out the location of a recipe (via search) (for scripted editing)")
parser.add_option('--test', action='store_true', dest='test',
                  default=False, help="run tests on resulting binaries")
parser.add_option('--lint', action='store_true', dest='lint',
                  default=False, help="scan the ports tree for problems")

(options, args) = parser.parse_args()
haikuporter = HaikuPorter(options, args)
