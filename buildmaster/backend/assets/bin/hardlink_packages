#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Hardlink only packages used in the build from one directory to another,
# and updates the RemotePackageRepository file at the same time.
#
# Copyright 2017-2020 Augustin Cavalier <waddlesplash>
# Distributed under the terms of the MIT License.

import sys, os, subprocess, re, hashlib
from pkg_resources import parse_version

base_dir = "/var/packages"

# Detect architecture from provided jam remote package repo file
def probe_architecture(jamf):
	text = ""
	with open(jamf) as f:
		for readline in f:
			line_strip = readline.strip()
			text += line_strip
	return text.split(":")[1].strip()

if len(sys.argv) != 2:
	print("")
	print("usage: hardlink_packages [jam RemotePackageRepository file] ")
	print("")
	print("  This tool updates the inventory of build-packages to the latest package")
	print("  versions for the repository RemotePackageRepository file provided. After")
	print("  the latest packages are assigned, they are hardlinked into a repository")
	print("  with a matching sha256 signature.")
	print("")
	print("  1. Please ensure latest build-packages have been placed in " + base_dir)
	print("  2. Note that the [jam RemotePackageRepository file] will be modified.")
	print("     After this tool modifies it, you must check it into git as-is without")
	print("     modification of any kind. (the repo is based on the sha256 of it)")
	print("")
	sys.exit(1)

if subprocess.run(['package_repo'], None, None, None,
		subprocess.DEVNULL, subprocess.PIPE).returncode != 1:
	print("package_repo command does not seem to exist.")
	sys.exit(1)

args_jamf = sys.argv[1]

# Source packages for hardlink
src_packages = base_dir + "/build-packages/master/packages/"
# Destination build-packages repository
# (assumed to have a packages subdir and a repo.info.template file)
dst_repository = base_dir + "/build-packages/master/"
# Architecture to hardlink
arch = probe_architecture(args_jamf)

print("Detected Architecture: " + arch)

if not dst_repository.endswith('/'):
	dst_repository = dst_repository + '/'
if not src_packages.endswith('/'):
	src_packages = src_packages + '/'

dst_repository_packages = dst_repository + 'packages/'

packageVersions = []
for filename in os.listdir(src_packages):
	if (not (filename.endswith("-" + arch + ".hpkg")) and
			not (filename.endswith("-any.hpkg"))):
		continue
	packageVersions.append(filename)

# Read RemotePackageRepository file and hardlink relevant packages
pattern = re.compile("^[a-z0-9]")
newFileForJam = []
packageFiles = []
filesNotFound = False
with open(args_jamf) as f:
	for line in f:
		pkg = line.strip()
		if (len(pkg) == 0):
			continue
		if not (pattern.match(pkg)):
			# not a package (probably a Jam directive)
			newFileForJam.append(line)
			continue

		try:
			pkgname = pkg[:pkg.index('-')]
		except:
			pkgname = ''
		if (len(pkgname) == 0):
			# no version, likely a source/debuginfo listing
			newFileForJam.append(line)
			continue

		greatestVersion = None
		for pkgVersion in packageVersions:
			if (pkgVersion.startswith(pkgname + '-')):
				if ((greatestVersion == None) or parse_version(pkgVersion) > parse_version(greatestVersion)):
					greatestVersion = pkgVersion
		if (greatestVersion == None):
			print("not found: " + pkg)
			newFileForJam.append(line)
			filesNotFound = True
			continue
		else:
			# found it, so hardlink it
			if not (os.path.exists(dst_repository_packages + greatestVersion)):
				os.link(src_packages + greatestVersion, dst_repository_packages + greatestVersion)
			if ('packages/' + greatestVersion) not in packageFiles:
				packageFiles.append('packages/' + greatestVersion)
			# also hardlink the source package, if one exists
			srcpkg = greatestVersion.replace("-" + arch + ".hpkg",
				"-source.hpkg").replace('-', '_source-', 1)
			if os.path.exists(src_packages + srcpkg):
				if not os.path.exists(dst_repository_packages + srcpkg):
					os.link(src_packages + srcpkg, dst_repository_packages + srcpkg)
				if ('packages/' + srcpkg) not in packageFiles:
					packageFiles.append('packages/' + srcpkg)
		newFileForJam.append("\t" + greatestVersion[:greatestVersion.rfind('-')] + "\n");

if filesNotFound:
	sys.exit(1)

finalizedNewFile = "".join(newFileForJam).encode('UTF-8')
with open(args_jamf, 'wb') as f:
	f.write(finalizedNewFile)

listhash = hashlib.sha256(finalizedNewFile).hexdigest()
try:
	os.mkdir(dst_repository + listhash)
except:
	print("dir " + listhash + " already exists. No changes?")
	sys.exit(1)

repodir = dst_repository + listhash + '/'
os.symlink('../packages', repodir + 'packages')

with open(dst_repository + 'repo.info.template', 'r') as ritf:
	repoInfoTemplate = ritf.read()

repoInfoTemplate = repoInfoTemplate.replace("$ARCH$", arch)
with open(repodir + 'repo.info', 'w') as rinf:
	rinf.write(repoInfoTemplate)

packageFiles.sort()
with open(repodir + 'package.list', 'w') as pkgl:
	pkgl.write("\n".join(packageFiles))

if os.system('cd ' + repodir + ' && package_repo create repo.info ' + " ".join(packageFiles)) != 0:
	print("failed to create package repo.")
	sys.exit(1)

if os.system('cd ' + repodir + ' && sha256sum repo >repo.sha256') != 0:
	print("failed to checksum package repo.")
	sys.exit(1)
